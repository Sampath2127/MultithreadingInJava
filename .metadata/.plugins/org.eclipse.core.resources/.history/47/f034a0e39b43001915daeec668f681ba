package com.love2code.blockingqueues;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.locks.ReentrantLock;

public class Main {
public static final String EOF="EOF";
	
	public static void main(String[] args) {
		ArrayBlockingQueue<String> buffer=new ArrayBlockingQueue<>(8);
		ExecutorService executorService=Executors.newFixedThreadPool(5);
		MyProducer producer=new MyProducer(buffer, ThreadColor.ANSI_BLUE);
		MyConsumer consumer1=new MyConsumer(buffer, ThreadColor.ANSI_PURPLE);
		MyConsumer consumer2=new MyConsumer(buffer, ThreadColor.ANSI_CYAN);
		
		executorService.execute(producer);
		executorService.execute(consumer1);
		executorService.execute(consumer2);
		
		Future<String> future=executorService.submit(new Callable<String>() {

			@Override
			public String call() throws Exception {
				System.out.println(ThreadColor.ANSI_WHITE+" From Callable class..!");
				return "returning result for callable";
			}
			
		});
		
		try {
			System.out.println(future.get());
		} catch (InterruptedException e) {
			System.out.println("Thread executing was interupted..!");
		}catch(ExecutionException e){
			System.out.println("something went wrong while executing..!");
		}
		
		executorService.shutdown();
	}

}

class MyProducer implements Runnable{

	
	private ArrayBlockingQueue<String> buffer;
	private String color;	
	
	
	public MyProducer(ArrayBlockingQueue<String> buffer2, String color) {
		this.buffer = buffer2;
		this.color = color;
	}

	@Override
	public void run() {
		Random random=new Random();
		String[] nums={"1","2","3","4","5","6","7"};
		
		for(String num:nums){
			try{
				System.out.println(color+" Adding..."+ num);
				buffer.put(num);
				
				Thread.sleep(random.nextInt(1000));
			}catch(InterruptedException ex){
				System.out.println("Producer is interrupted...!");
			}
		}
		System.out.println(color+ "Adding EOF and exiting process..!");
		try{
		buffer.put(Main.EOF);
		}catch(InterruptedException ex){
			System.out.println("Interrupted producer executing..!");
	}
	}
}

class MyConsumer implements Runnable{

	private ArrayBlockingQueue<String> buffer;
	private String color;
	
	public MyConsumer(ArrayBlockingQueue<String> queue, String color) {
		this.buffer = queue;
		this.color = color;
	}


	@Override
	public void run() {
		int counter = 0;
		while(true){
	
				try{
				if(buffer.isEmpty()){
					continue;
				}
				System.out.println(color+ "The counter ="+ counter);
				counter=0;
				if(buffer.peek().equals(Main.EOF)){
					System.out.println(color+" Exiting..!");
					break;
				}else{
					System.out.println(color+ "Removed " + buffer.take());
					
				}
			}catch(InterruptedException ex){
				System.out.println("Thread interrupted while consuming..!");
			}
			}
}


